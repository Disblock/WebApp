//Used to store what var blocks can be used in what event block
const events_var_blocks = {
  event_message_sent:['event_var_message'],
  event_message_deleted:['event_var_message'],
  event_message_updated:['event_var_message_old', 'event_var_message_new'],
  event_user_join:['event_var_user'],
  event_user_left:['event_var_user'],
  event_user_updated:['event_var_old_user', 'event_var_new_user'],
  event_text_channel_created:['event_var_text_channel'],
  event_text_channel_deleted:['event_var_text_channel'],
  event_text_channel_edited:['event_var_old_text_channel', 'event_var_new_text_channel'],
  event_voice_channel_created:['event_var_voice_channel'],
  event_voice_channel_deleted:['event_var_voice_channel'],
  event_voice_channel_edited:['event_var_old_voice_channel', 'event_var_new_voice_channel'],
  event_role_created:['event_var_rank'],
  event_role_deleted:['event_var_rank'],
  event_role_edited:['event_var_old_rank', 'event_var_new_rank'],
  event_user_banned:['event_var_user'],
  event_reaction_added:['event_var_message', 'event_var_reaction', 'event_var_user'],
  event_reaction_removed:['event_var_message', 'event_var_reaction', 'event_var_user'],
  event_user_voice_update:['event_var_old_voice_channel', 'event_var_new_voice_channel', 'event_var_user'],
  event_user_start_writting:['event_var_user', 'event_var_text_channel']
}

/* When variable type edited, this function remove the value of this variable to avoid types errors*/
function saveVarBlockModified(event){
  if(event.type==Blockly.Events.BLOCK_CHANGE && workspace.getBlockById(event.blockId).type=="block_var_save"){
    if(event.name=="TYPE" && workspace.getBlockById(event.blockId).allInputsFilled()){
      //A block is in block input, we can remove it to make sure an incompatible type isn't used
      workspace.getBlockById(event.blockId).getChildren(true)[0].unplug();
      workspace.getBlockById(event.blockId).bumpNeighbours();
    }else if(event.name=="NAME"){
      if(/^[a-zA-Z0-9]{1,16}$/.test(event.newValue)){
        //Valid name
        workspace.getBlockById(event.blockId).setWarningText(null);
      }else{
        //Error : invalid name
        workspace.getBlockById(event.blockId).setWarningText(Blockly.Msg["WARNING_INVALID_NAME"]);
      }
    }
  }
}

/* When a value is added in save variable block, we check that this value is compatible with the variable's type.
   We also disable utilization of variable get directly in variable set blocks*/
function checkIfValueAndTypeVarCompatibles(event){
  if(event.type==Blockly.Events.BLOCK_MOVE && event.newParentId){
    if(workspace.getBlockById(event.newParentId).type!="block_var_save" || workspace.getBlockById(event.blockId).outputConnection==null)return;//We only work with blocks connected as value of a save variable block
    if(workspace.getBlockById(event.blockId).type=="block_var_get"){workspace.getBlockById(event.blockId).unplug();return;}//Using getter directly in a setter may cause an error. Must correctly handle this before allowing it

    if(workspace.getBlockById(event.blockId).outputConnection.getCheck().includes(workspace.getBlockById(event.newParentId).getFieldValue('TYPE'))){
      //If value and var type are compatibles
      workspace.getBlockById(event.newParentId).setWarningText(null);
    }else{
      //They aren't compatibles
      workspace.getBlockById(event.newParentId).setWarningText(Blockly.Msg["WARNING_SAVE_VAR_INCOMPATIBLE"]);
      workspace.getBlockById(event.blockId).unplug();
    }

  }
}

/* This function will be called each time a block is added or removed from workspace to update the blocks count <p> */
function updateMaxBlocks(event){
  if(event.type==Blockly.Events.BLOCK_CREATE || Blockly.Events.BLOCK_DELETE){
    $('#blocks_count').text('<%-locale.blocksInWorkspace%>'+workspace.getAllBlocks(false).length +' / '+maxBlocks);
  }
}

workspace.addChangeListener(saveVarBlockModified);
workspace.addChangeListener(checkIfValueAndTypeVarCompatibles);
workspace.addChangeListener(updateMaxBlocks);

/*Function used to check if everything seems OK in workspace before sending code
We check : - Temporary variables blocks

Return {correct:true, message:'OK'} or {correct:false, message:'Error message'}*/
function validateWorkspace(workspace){

  let blocks = workspace.getAllBlocks(false);//All blocks in this workspace

  //We check if user used the allowed number of blocks
  if(blocks.length > maxBlocks){
    return({correct:false, message:Blockly.Msg["WARNING_TOO_MANY_BLOCKS"]});
  }

  for(let i=0; i<blocks.length; i++){
    blocks[i].setWarningText(null);//We remove the warning, and add it again below if needed
  }

  //Get all top blocks
  let topBlocks = workspace.getTopBlocks();
  let foundError = false;//Become true when an error is found

  //For each top block, we check what types and names of variables are defined, and check that every getter block is correctly placed
  for(let i=0; i<topBlocks.length; i++){
    let variablesTypes = {};//Will store what name contain what type of data as an object : {name:type, ...}
    let blocksInEvent = topBlocks[i].getDescendants(true);//Every blocks in this event, sorted

    if(blocksInEvent.length==1)continue;//This block is alone, that's useless to continue


    for(let j=0; j<blocksInEvent.length; j++){
      if(blocksInEvent[j].type=="block_var_save"){
        //That's a setter block, we save his name and type here

        if(!( blocksInEvent[j].allInputsFilled() && /^[a-zA-Z0-9]{1,16}$/.test(blocksInEvent[j].getFieldValue('NAME')) )){
          if(!blocksInEvent[j].allInputsFilled()) blocksInEvent[j].setWarningText(Blockly.Msg["WARNING_SAVE_VAR_UNCOMPLETE"]);//Incomplete !
          if(!/^[a-zA-Z0-9]{1,16}$/.test(blocksInEvent[j].getFieldValue('NAME'))) blocksInEvent[j].setWarningText(Blockly.Msg["WARNING_INVALID_NAME"]);//Invalid name !

          foundError = true;
        }

        variablesTypes[blocksInEvent[j].getFieldValue('NAME')] = blocksInEvent[j].getFieldValue('TYPE');

      }else if(blocksInEvent[j].type=="block_var_get"){

        //Getter block, we check if it's correctly placed or not
        let neededTypes = blocksInEvent[j].outputConnection.targetConnection.getCheck();
        if(neededTypes==null)neededTypes=[];// Accept everything, [] == 0

        if(!( neededTypes.includes(variablesTypes[blocksInEvent[j].getFieldValue('NAME')]) || neededTypes==0 )){
          //Error
          blocksInEvent[j].setWarningText(Blockly.Msg["WARNING_GET_VAR_INCORRECT_VALUE"]);
          foundError = true;
        }

      }
    }
  }

  //Finished to check temporary variables, if there is an error, we can stop here
  if(foundError)return({correct:false, message:Blockly.Msg["WARNING_GET_VAR_INCORRECT_VALUE_WINDOW"]});

  //Now checking if an Event var Block was uncorrectly placed
  for(let i=0; i<blocks.length; i++){
    if(!blocks[i].getRootBlock())continue;//This block is alone

    if(events_var_blocks[blocks[i].getRootBlock().type] && blocks[i].type.startsWith("event_var_")){//The top block must be an event and have registered event var blocks, the source block must be an event var block
      if( !events_var_blocks[blocks[i].getRootBlock().type].includes(blocks[i].type) ){
        //There is an error in workspace !
        blocks[i].setWarningText(Blockly.Msg["WARNING_EVENT_VAR_BLOCK_INCORRECTLY_PLACED"]);
        foundError = true;
      }
    }
  }

  //Finished to check event var blocks, stop here in case of error
  if(foundError)return({correct:false, message:Blockly.Msg["WARNING_EVENT_VAR_BLOCK_INCORRECTLY_PLACED_WINDOW"]});

  //Now checking for empty text blocks
  for(let i=0; i<blocks.length; i++){
     if(blocks[i].type==="text"){
       if(/^\s*('|\\')*\s*$/.test(blocks[i].getFieldValue('TEXT'))){
         //Text value is empty
         blocks[i].setWarningText(Blockly.Msg["WARNING_EMPTY_TEXT_BLOCK"]);
         foundError = true;
       }
     }
  }
  //Finished to check text blocks, stop here in case of error
  if(foundError)return({correct:false, message:Blockly.Msg["WARNING_EMPTY_TEXT_BLOCK_WINDOW"]});

  //Now checking if there is an uncorrectly defined custom emoji in Emoji/reactions blocks
  for(let i=0;i<blocks.length;i++){
    if(blocks[i].type==="block_emoji_react" || blocks[i].type==="block_emoji_get_number_of_reactions" || blocks[i].type==="block_emoji_remove_reaction"){

      if(blocks[i].getInputTargetBlock('emoji').type==='text'){//A text block is used a value for the emoji

        if(/[a-zA-Z0-9]+/.test(blocks[i].getInputTargetBlock('emoji').getFieldValue('TEXT'))){
          //A custom emoji is used in this block. We will check that it's correctly defined. We check with a regex, because Discord's Ascii emojis shouldn't include a-Z0-9 chars.

          if(! /^<:[a-zA-Z0-9]+:[0-9]+>$/.test(blocks[i].getInputTargetBlock('emoji').getFieldValue('TEXT'))){
            //Regex NOT OK
            blocks[i].getInputTargetBlock('emoji').setWarningText(Blockly.Msg["WARNING_INVALID_CUSTOM_EMOJI_STRING"]);
            foundError = true;
          }
        }
      }
    }
  }
  //Finished to check custom emoji uses. In case of error, stop here
  if(foundError)return({correct:false, message:Blockly.Msg["WARNING_INVALID_CUSTOM_EMOJI_STRING_WINDOW"]});

  let commandNames = [];//Used to store commands names. Will allow us to detect duplicated names
  //Now checking that there isn't any problem with slash commands blocks
  for(let i=0; i<blocks.length;i++){

    //Commands blocks must be insine an command creator block
    if(blocks[i].type.startsWith("block_slash_command_") && blocks[i].type!=="block_slash_command_creator"){
      //This block is a command block, which can only be placed alone or in command_creator block
      if(blocks[i].getRootBlock().type.startsWith("event_")){//If block is placed in an event block
        //This block isn't correctly placed
        blocks[i].setWarningText(Blockly.Msg["WARNING_SLASH_COMMAND_INCORRECT_PLACEMENT"]);
        foundError = true;
        continue;//An error was found, we can check the next block
      }
    }

    //Names and descriptions most be valid
    if(blocks[i].type.startsWith("block_slash_command_arg") || blocks[i].type.startsWith("block_slash_command_creator")){
      if(! /^([a-z0-9]{3,28})$/.test(blocks[i].getFieldValue('NAME')) || ! /^([A-Za-z0-9 ,ąćęóśżźéèê.!?;\-:()€$£%*+/]{0,100})$/.test(blocks[i].getFieldValue('DESC'))){//Regex also checked in back-end
        //NOT OK
        blocks[i].setWarningText(Blockly.Msg["WARNING_SLASH_COMMAND_INVALID_REGEX"]);
        foundError = true;
        continue;
      }
    }

    //Commands names must be unique and no more than n args
    if(blocks[i].type === "block_slash_command_creator"){
      if(commandNames.includes(blocks[i].getFieldValue('NAME'))){
        //NOT OK
        blocks[i].setWarningText(Blockly.Msg["WARNING_SLASH_COMMAND_DUPLICATED_NAME"]);
        foundError = true;
        continue;
      }else{
        //OK
        commandNames.push(blocks[i].getFieldValue('NAME'));
      }

      //No more than n args
      const childBlocks = blocks[i].getDescendants(false/*ordered*/);
      let argCount = 0;
      for(let j=0; j<childBlocks.length; j++){
        if(childBlocks[j].type.startsWith("block_slash_command_arg_"))argCount++;
        //When an arg block is found, we add 1 to number of arg blocks
      }
      if(argCount > <%-process.env.COMMAND_MAX_ARGS%> ){
        //NOT OK
        blocks[i].setWarningText(Blockly.Msg["WARNING_SLASH_COMMAND_TOO_MANY_ARGS"]);
        foundError = true;
        continue;
      }
    }

    //Optionnal commands args must be defined after required ones, args must be defined before being used
    if(blocks[i].type === "block_slash_command_creator"){
      const childBlocks = blocks[i].getDescendants(true);//All blocks within this command creator

      let optionnals = false;//Will be set to true when we will find optionnal args
      for(let j=0; j<childBlocks.length; j++){
        if(childBlocks[j].type.startsWith("block_slash_command_arg_")){
          //This is an arg block, we will check if required or optionnal
          const requiredBlocks = childBlocks[j].getFieldValue('REQUIRED') === 'TRUE';
          if(requiredBlocks && !optionnals){
            //OK, this block is required, and not defined after an optionnal block
          }else if(!requiredBlocks && !optionnals){
            //OK, this is the first optionnal block
            optionnals = true;
          }else if(!requiredBlocks && optionnals){
            //OK, this is an optionnal block, defined after required ones
          }else{
            //NOT OK, seems to be a required arg defined after an optionnal arg
            childBlocks[j].setWarningText(Blockly.Msg["WARNING_SLASH_COMMAND_INVALID_REQUIRE_STATE"]);
            foundError = true;
          }
        }
      }

      //We will now check that used arguments are correctly defined and if at least one reply block is used
      let definedArgs = {};//Will store args types and names
      let argsNames = [];//Will store args names to check that no names are duplicated
      let replyBlockused = false;//Users must have used at least one command reply block
      for(let j=0; j<childBlocks.length; j++){
        //childBlocks is a sorted list of blocks in a command block creator
        if(childBlocks[j].type.startsWith("block_slash_command_arg_")){
          //This block define an arg, we will save his type and name
          const argType = childBlocks[j].type.replace("block_slash_command_arg_", "");//We only keep the arg type
          if(! definedArgs[argType]){
            //We will add this type in this object
            definedArgs[argType] = [];
          }
          const blockName = childBlocks[j].getFieldValue('NAME');
          definedArgs[argType].push(blockName);

          if(argsNames.includes(blockName)){
            //NOT OK, this arg is defined with an already given name
            childBlocks[j].setWarningText(Blockly.Msg["WARNING_SLASH_COMMAND_DUPLICATED_ARG"]);
            foundError = true;
          }
          argsNames.push(blockName);

        }else if(childBlocks[j].type.startsWith("block_slash_command_get_")){
          //This block use a defined arg, we will check that it was defined
          const argType = childBlocks[j].type.replace("block_slash_command_get_", "");//We only keep the arg type
          if(definedArgs[argType]){
            if(definedArgs[argType].includes(childBlocks[j].getFieldValue('NAME'))){
              //OK
              continue;//Check next block
            }
          }
          //NOOT NOOT, this block refer to an undefined arg
          childBlocks[j].setWarningText(Blockly.Msg["WARNING_SLASH_COMMAND_UNDEFINED_NAME"]);
          foundError = true;
        }
        else if(childBlocks[j].type === "block_slash_command_reply")replyBlockused=true;//At least one reply block used

        //Event var blocks can't be used in commands
        if(childBlocks[j].type.startsWith("event_var_")){
          childBlocks[j].setWarningText(Blockly.Msg["WARNING_SLASH_COMMAND_EVENT_VAR_USED"]);
          foundError = true;
        }
      }//End of loop

      if(!replyBlockused){
        //No reply block used in this command !
        blocks[i].setWarningText(Blockly.Msg["WARNING_SLASH_COMMAND_NO_REPLY_BLOCK"]);
        foundError = true;
      }
    }


  }
  //Finished to check for problems with slash command blocks
  if(foundError)return({correct:false, message:Blockly.Msg["WARNING_SLASH_COMMAND_ERROR_WINDOW"]});

  //End of this function, we didn't found any error
  return({correct:true, message:'OK'});

}

//When an event var block is added somewhere, we check if the event is compatible with the var block
function checkIfEventVarBlockCorrectlyPlaced(event){
  if(event.type!=Blockly.Events.BLOCK_MOVE || !workspace.getBlockById(event.blockId) )return;//wrong event type or block undefined
  if(!workspace.getBlockById(event.blockId).getRootBlock())return;//block alone

  if(events_var_blocks[workspace.getBlockById(event.blockId).getRootBlock().type] && workspace.getBlockById(event.blockId).type.startsWith("event_var_")){
    if( events_var_blocks[workspace.getBlockById(event.blockId).getRootBlock().type].includes(workspace.getBlockById(event.blockId).type) ){
      //OK
      workspace.getBlockById(event.blockId).setWarningText(null);
    }else{
      //NOT OK, event type incompatible with this event var
      workspace.getBlockById(event.blockId).setWarningText(Blockly.Msg["WARNING_EVENT_VAR_BLOCK_INCORRECTLY_PLACED"]);
      workspace.getBlockById(event.blockId).unplug();
    }
  }
}
workspace.addChangeListener(checkIfEventVarBlockCorrectlyPlaced);

//When a block is added in a command creator block, we will check his it's an arg block or not.
function checkIfAddedBlockIsCommandArgBlock(event){
  if(event.type!=Blockly.Events.BLOCK_MOVE || !workspace.getBlockById(event.blockId) )return;//wrong event type or block undefined
  if(!workspace.getBlockById(event.blockId).previousConnection)return;//Top block without previous connection, no need to check
  if(!workspace.getBlockById(event.blockId).previousConnection.targetConnection)return;//block alone
  if(!workspace.getBlockById(event.blockId).getRootBlock().type=="block_slash_command_creator")return;//This block is not in a command creator block, useless to check further
  if(!workspace.getBlockById(event.blockId).previousConnection.targetConnection.getCheck())return;//This block also need to be connected to a connection that contain checks

  if(workspace.getBlockById(event.blockId).previousConnection.targetConnection.getCheck().includes("SlashCommandOption")
    && !workspace.getBlockById(event.blockId).type.startsWith("block_slash_command_arg_")){
      //Block is connected to a SlashCommandOption, and isn't an arg for commands
      workspace.getBlockById(event.blockId).unplug();
    }
}
workspace.addChangeListener(checkIfAddedBlockIsCommandArgBlock);
