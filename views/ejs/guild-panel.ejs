<!-- Content div : Informations, ect... -->
<link rel="stylesheet" type="text/css" href="/style/guild-panel-style">
<div id="content_div">

  <!-- This div is just under the #top_div, contain guild name and picture  -->
  <%- include("../assets/guild_div.ejs", {guild:guild, premium:premium})%>

  <!-- This div contain the blocks on top of this space -->
  <div id="content_div_header_div">
    <!--<div class="content_div_header_div_subdiv">
      <p>
        <a href="#"><%- locale.manageServerVars %></a>
      </p>
    </div>-->

    <div class="content_div_header_div_subdiv">
      <p>
        <a href="/panel/<%- guild.id %>/logs"><%- locale.modificationsLogs %></a>
      </p>
    </div>

    <div class="content_div_header_div_subdiv">
      <p>
        <a href="/panel/<%- guild.id %>/rollback"><%- locale.rollbackServer %></a>
      </p>
    </div>
  </div>

  <div id="content_blockly">
    <div id="requestFullscreen" class="fullscreen_div"><i class="gg-maximize"></i></div>
    <div id="cancelFullscreen" class="fullscreen_div" style="display:none;"><i class="gg-minimize"></i></div>
  </div>

  <div id="content_bottom_div">
    <button onclick="sendWorkspaceToServer()" id="send_button"><%- locale.sendCodeButton %></button><!-- Temporary ! -->
    <p class="content_bottom_div_blocks_count" id="blocks_count"></p>
  </div>


</div>

<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/blockly@10.0.0/blockly.min.js"></script>
<script><%- blocklyLocale %>Blockly = init(Blockly);</script>

<script>
  //FullScreen control
  $("#requestFullscreen").click(function(){
    $("#requestFullscreen").css({"display":"none"});
    $("#cancelFullscreen").css({"display":"block"});

    $("#content_blockly").addClass("full_screen_mode");
    Blockly.svgResize(workspace);

  });
  $("#cancelFullscreen").click(function(){
    $("#cancelFullscreen").css({"display":"none"});
    $("#requestFullscreen").css({"display":"block"});

    $("#content_blockly").removeClass("full_screen_mode");
    Blockly.svgResize(workspace);

  });

  //Remove full screen mode if esc pressed
  $(document).on('keydown', function(event){
    if(event.key == "Escape" && $("#content_blockly").hasClass("full_screen_mode")){
      //Esc key pressed and full screen enabled
      $("#cancelFullscreen").css({"display":"none"});
      $("#requestFullscreen").css({"display":"block"});

      $("#content_blockly").removeClass("full_screen_mode");
      Blockly.svgResize(workspace);
    }
  });



  const socket = io();
  const toolbox = document.getElementById("toolbox");

  <%
  let disabledBlocks = {};//Used to store the types of the disabled blocks
  if(premium){ %>
      const maxBlocks = <%- process.env.P_WORKSPACE_MAX_BLOCKS %>;

      <%
      if(process.env.P_MAX_BLOCKS_BY_TYPE!="none"){
        //We will limit the amount of some blocks
        process.env.P_MAX_BLOCKS_BY_TYPE.split(',').forEach((item, i) => {
          let block = item.split(':');// block = [block_type, max_amount]
          disabledBlocks[block[0]] = parseInt(block[1]);
        });
      }
  }else{%>
      const maxBlocks = <%- process.env.NP_WORKSPACE_MAX_BLOCKS %>;

      <%
      if(process.env.NP_MAX_BLOCKS_BY_TYPE!="none"){
        //We will limit the amount of some blocks
        process.env.NP_MAX_BLOCKS_BY_TYPE.split(',').forEach((item, i) => {
          let block = item.split(':');// block = [block_type, max_amount]
          disabledBlocks[block[0]] = parseInt(block[1]);
        });
      }
  }%>
  //We define the max blocks amount in #blocks_count
  $('#blocks_count').text('<%-locale.blocksInWorkspace%>'+' 0 / '+maxBlocks);

  <%

    for(let key in definedRegexes){//We import here regexes saved in modules/utils/regex.js
      //variableNameRegex; slashCommandNameRegex; ect.. are functions defined here; in rejex.js
      %><%- definedRegexes[key] %><%
    }

    for(let i=0;i<blocks.length;i++){
      %> Blockly.defineBlocksWithJsonArray(<%- blocks[i] %>); <%
    }

    for(let i=0; i<extensions.length; i++){//https://stackoverflow.com/a/9091416
      %> (<%- extensions[i] %>)(Blockly);<%//extensions contains functions that define executed functions when blocks are created. Since that's directly functions, we can import them and execute them immediately on client side
    }
  %>

  const custom_theme = Blockly.Theme.defineTheme('themeName', {
    'base': Blockly.Themes.Classic,
    'startHats': true
  });

  let options = {
    toolbox : toolbox,
    collapse : true,
    comments : true,
    disable : false,
    maxBlocks : maxBlocks,
    maxInstances: <%- JSON.stringify(disabledBlocks) %>,
    trashcan : true,
    horizontalLayout : false,
    toolboxPosition : 'start',
    css : true,
    //media : 'https://blockly-demo.appspot.com/static/media/',
    rtl : false,
    scrollbars : true,
    sounds : true,
    oneBasedIndex : true,
    grid:
     {spacing: 20,
      length: 6,
      colour: '#ccc',
      snap: true},
    zoom:
     {controls: true,
      wheel: true,
      startScale: 1.0,
      maxScale: 3,
      minScale: 0.3,
      scaleSpeed: 1.2,
      pinch: true},
    theme: custom_theme
  };

  let workspace = Blockly.inject("#content_blockly", options);
  workspace.addChangeListener(Blockly.Events.disableOrphans);//Disable blocks not on events

  //If a workspace is stored in database, it is restored here
  <% if(workspaceXml){
      escapedWorkspaceXml = workspaceXml/*.replace(/'/g, "\\'").replace(/"/g, '\\"')*/.replace(/`/g, '\\`');//We must escape that in order to display it without problems
   %>
    Blockly.Xml.domToWorkspace(Blockly.utils.xml.textToDom(`<%- escapedWorkspaceXml %>`), workspace);
    $('#blocks_count').text('<%-locale.blocksInWorkspace%>'+workspace.getAllBlocks(false).length +' / '+maxBlocks);
    <%
  }%>

  //We include here events for Blockly and validateWorkspace()
  <%-include("../js/blockly_functions.ejs", {});%>

  //Here, the enum that list all possibles errors after sending a workspace
  const errorsEnum = JSON.parse('<%-errorsEnum%>');

  //Function to send workspace's blocks to the server :
  function sendWorkspaceToServer(){
    //We check here that everything seems OK
    const check = validateWorkspace(workspace);
    if(!check.correct){
      //There is a problem !
      showWindow(false, "<%- locale.showWindowSendCodeErrorTitle %>", check.message);
      return;
    }

    socket.emit("send_workspace","<%- guild.id %>" , Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace, true/*Skip blocks id*/)), (callback)=>{
      if(callback.status == "OK"){
        showWindow(true, "<%- locale.showWindowSendCodeSuccessTitle %>", "<%- locale.showWindowSendCodeSuccessText %>");
      }else{
        let message;
        switch(callback.errorCode){
          case errorsEnum.notLoggedIn:
            message = "<%- locale.workspaceToJsNotLoggedIn %>";
            break;
          case errorsEnum.banned:
            message = "<%- locale.workspaceToJsBanned %>";
            break;
          case errorsEnum.notFound:
            message = "<%- locale.workspaceToJsNotFound %>";
            break;
          case errorsEnum.tooManyBlocks:
            message = "<%- locale.workspaceToJsTooManyBlocks %>";
            break;
          case errorsEnum.incorrectlyPlacedBlocks:
            message = "<%- locale.workspaceToJsIncorrectlyPlacedBlocks %>";
            break;
          case errorsEnum.tooManyOfABlock:
            message = "<%- locale.workspaceToJsTooManyOfABlock %>";
            break;
          case errorsEnum.invalidRegex:
            message = "<%- locale.workspaceToJsInvalidRegex %>";
            break;
          case errorsEnum.rateLimitError:
            message = "<%- locale.workspaceToJsRateLimitError %>";
            break;
          case errorsEnum.uncompleteBlock:
            message = "<%- locale.workspaceToJsUncompleteBlock %>";
            break;
          case errorsEnum.errorWithStorageBlocks:
            message = "<%- locale.errorWithStorageBlocks %>";
            break;
          default:
            message = "<%- locale.workspaceToJsError %>";
            break;
        }
        showWindow(false, "<%- locale.showWindowSendCodeErrorTitle %>", message);
        console.log("ERROR : "+ callback.status);
      }
    });
  }
</script>
