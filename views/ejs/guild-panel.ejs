<!-- Content div : Informations, ect... -->
<link rel="stylesheet" type="text/css" href="/style/guild-panel-style">
<div id="content_div">

  <!-- This div is just under the #top_div, contain guild name and picture  -->
  <%- include("../assets/guild_div.ejs", {guild:guild, premium:premium})%>

  <!-- This div contain the blocks on top of this space -->
  <div id="content_div_header_div">
    <!--<div class="content_div_header_div_subdiv">
      <p>
        <a href="#"><%- locale.manageServerVars %></a>
      </p>
    </div>-->

    <div class="content_div_header_div_subdiv">
      <p>
        <a href="/panel/<%- guild.id %>/logs"><%- locale.modificationsLogs %></a>
      </p>
    </div>

    <div class="content_div_header_div_subdiv">
      <p>
        <a href="/panel/<%- guild.id %>/rollback"><%- locale.rollbackServer %></a>
      </p>
    </div>
  </div>

  <div id="content_blockly">
  </div>

  <div id="content_bottom_div">
    <button onclick="sendWorkspaceToServer()" css="z-index: 999;"><%- locale.sendCodeButton %></button><!-- Temporary ! -->
    <p class="content_bottom_div_blocks_count" id="blocks_count"></p>
  </div>


</div>

<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/blockly/blockly.min.js"></script>
<script><%- blocklyLocale %>Blockly = init(Blockly);</script>

<script>
  const socket = io();
  const toolbox = document.getElementById("toolbox");

  <% if(premium){ %>
      const maxBlocks = <%- process.env.P_WORKSPACE_MAX_BLOCKS %>;
  <%}else{%>
      const maxBlocks = <%- process.env.NP_WORKSPACE_MAX_BLOCKS %>;
  <%}%>
  //We define the max blocks amount in #blocks_count
  $('#blocks_count').text('<%-locale.blocksInWorkspace%>'+' 0 / '+maxBlocks);

  <%
    for(var i=0;i<blocks.length;i++){
      %> Blockly.defineBlocksWithJsonArray(<%- blocks[i] %>); <%
    }
  %>

  const custom_theme = Blockly.Theme.defineTheme('themeName', {
    'base': Blockly.Themes.Classic,
    'startHats': true
  });

  var options = {
    toolbox : toolbox,
    collapse : true,
    comments : true,
    disable : false,
    maxBlocks : maxBlocks,
    trashcan : true,
    horizontalLayout : false,
    toolboxPosition : 'start',
    css : true,
    //media : 'https://blockly-demo.appspot.com/static/media/',
    rtl : false,
    scrollbars : true,
    sounds : true,
    oneBasedIndex : true,
    grid:
     {spacing: 20,
      length: 6,
      colour: '#ccc',
      snap: true},
    zoom:
     {controls: true,
      wheel: true,
      startScale: 1.0,
      maxScale: 3,
      minScale: 0.3,
      scaleSpeed: 1.2,
      pinch: true},
    theme: custom_theme
  };

  let workspace = Blockly.inject("#content_blockly", options);
  workspace.addChangeListener(Blockly.Events.disableOrphans);//Disable blocks not on events

  //If a workspace is stored in database, it is restored here
  <% if(workspace_xml){ %>
    Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(`<%- workspace_xml %>`), workspace);
    $('#blocks_count').text('<%-locale.blocksInWorkspace%>'+workspace.getAllBlocks(false).length +' / '+maxBlocks);
    <%
  }%>

  //We include here events for Blockly
  <%-include("../js/blockly_functions.ejs");%>

  //Function to send workspace's blocks to the server :
  function sendWorkspaceToServer(){
    //We check here that everything seems OK
    const check = validateWorkspace(workspace);
    if(!check.correct){
      //There is a problem !
      showWindow(false, "<%- locale.showWindowSendCodeErrorTitle %>", check.message);
      return;
    }

    socket.emit("send_workspace","<%- guild.id %>" , Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace, true/*Skip blocks id*/)), (callback)=>{
      if(callback.status == "OK"){
        showWindow(true, "<%- locale.showWindowSendCodeSuccessTitle %>", "<%- locale.showWindowSendCodeSuccessText %>");
      }else{
        showWindow(false, "<%- locale.showWindowSendCodeErrorTitle %>", "<%- locale.showWindowSendCodeErrorText %>");
        console.log("ERROR : "+ callback.status);
      }
    });
  }
</script>
